{"version":3,"sources":["../../src/API.js"],"names":["API_VERSION","CDN_CONTROLLER_PRO","CDN_CONTROLLER_STAG","CDN_CONTROLLER_DEV","request","url","options","callback","opt","headers","fetch","response","json","responseJson","Logger","debug","message","getPlaybackToken","api","appId","entityId","parseAPIUrl","method","body","JSON","stringify","entity_id","app_id","content_type","res","playbackToken","data","token","e","getCDNVod","env","domainAPI","param","type_content","Utils","queryParams","Authorization","getCDNLive","streamName","region","stream_name","region_type","getLiveDetail","feedId","getLiveView","id","getEntityDetail","entityDetail","getLiveStatusDetail","Base64","atob","urlToHttps"],"mappings":"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","file":"API.js","sourcesContent":["import React from 'react';\n\nimport Base64 from './utils/Base64';\nimport Utils, { Logger } from './utils/Utils';\n\nconst API_VERSION = 'v3';\nconst CDN_CONTROLLER_PRO = 'ucc.uiza.io';\nconst CDN_CONTROLLER_STAG = 'stag-ucc.uiza.io';\nconst CDN_CONTROLLER_DEV = 'dev-ucc.uizadev.io';\n\nexport default {\n  request: async function(url, options = {}, callback = null) {\n    try {\n      // options will extended into opt\n      const opt = {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        ...options\n      };\n\n      const response = await fetch(url, opt);\n      const responseJson = await response.json();\n\n      if (typeof callback === 'function') {\n        return callback({responseJson});\n      }\n\n      return responseJson;\n    } catch (e) {\n      Logger.debug('error api: ', e.message);\n\n      if (typeof callback === 'function') {\n        return callback(null);\n      }\n\n      return null;\n    }\n  },\n\n  getPlaybackToken: async function(api, appId, entityId, callback) {\n    const url = `${parseAPIUrl(api)}/api/public/${API_VERSION}/media/entity/playback/token`;\n    const options = {\n      method: 'POST',\n      body: JSON.stringify({\n        entity_id: entityId,\n        app_id: appId,\n        content_type: 'stream'\n      })\n    };\n\n    const res = await this.request(url, options);\n    let playbackToken = null;\n    try {\n      if (res.data.token) {\n        playbackToken = res.data.token;\n      }\n    } catch(e) {\n      Logger.debug('error getPlaybackToken: ', e.message);\n    }\n\n    if (typeof callback === 'function') {\n      return callback(playbackToken);\n    }\n\n    return playbackToken;\n  },\n\n  getCDNVod: async function(env, playbackToken, appId, entityId, callback) {\n    let domainAPI = CDN_CONTROLLER_PRO;\n    if (env === 'stag') {\n      domainAPI = CDN_CONTROLLER_STAG;\n    } else if (env === 'dev') {\n      domainAPI = CDN_CONTROLLER_DEV;\n    }\n    const param = {\n      app_id: appId,\n      entity_id: entityId,\n      type_content: 'stream'\n    };\n    const url = `https://${domainAPI}/api/private/v1/cdn/linkplay?${Utils.queryParams(param)}`;\n    const options = {\n      headers: {\n        Authorization: playbackToken\n      }\n    };\n\n    const res = await this.request(url, options);\n\n    try {\n      if (res) {\n        ;\n      }\n    } catch(e) {\n      Logger.debug('error getCDNVod: ', e.message);\n    }\n\n    if (typeof callback === 'function') {\n      return callback(res);\n    }\n\n    return res;\n  },\n\n  getCDNLive: async function(env, playbackToken, appId, entityId, streamName, region, callback) {\n    let domainAPI = CDN_CONTROLLER_PRO;\n    if (env === 'stag') {\n      domainAPI = CDN_CONTROLLER_STAG;\n    } else if (env === 'dev') {\n      domainAPI = CDN_CONTROLLER_DEV;\n    }\n    const param = {\n      app_id: appId,\n      entity_id: entityId,\n      stream_name: streamName,\n      region_type: region\n    };\n    const url = `https://${domainAPI}/api/private/v1/cdn/live/linkplay?${Utils.queryParams(param)}`;\n    const options = {\n      headers: {\n        Authorization: playbackToken\n      }\n    };\n\n    const res = await this.request(url, options);\n\n    try {\n      if (res) {\n        ;\n      }\n    } catch(e) {\n      Logger.debug('error getCDNLive: ', e.message);\n    }\n\n    if (typeof callback === 'function') {\n      return callback(res);\n    }\n\n    return res;\n  },\n\n  getLiveDetail: async function(api, token, entityId, feedId, callback) {\n    const param = {\n      entityId: entityId,\n      feedId: feedId\n    };\n    const url = `${parseAPIUrl(api)}/api/private/${API_VERSION}/live/entity/tracking?${Utils.queryParams(param)}`;\n    const options = {\n      headers: {\n        Authorization: token\n      }\n    };\n\n    const res = await this.request(url, options);\n\n    try {\n      if (res) {\n        ;\n      }\n    } catch(e) {\n      Logger.debug('error getLiveDetail: ', e.message);\n    }\n\n    if (typeof callback === 'function') {\n      return callback(res);\n    }\n\n    return res;\n  },\n\n  getLiveView: async function(api, token, entityId, callback) {\n    const param = {\n      id: entityId\n    };\n    const url = `${parseAPIUrl(api)}/api/private/${API_VERSION}/live/entity/tracking/current-view?${Utils.queryParams(param)}`;\n    const options = {\n      headers: {\n        Authorization: token\n      }\n    };\n\n    const res = await this.request(url, options);\n\n    try {\n      if (res) {\n        ;\n      }\n    } catch(e) {\n      Logger.debug('error getLiveView: ', e.message);\n    }\n\n    if (typeof callback === 'function') {\n      return callback(res);\n    }\n\n    return res;\n  },\n\n  getEntityDetail: async function(api, token, entityId, callback) {\n    const url = `${parseAPIUrl(api)}/api/public/${API_VERSION}/media/entity?id=${entityId}`;\n    const options = {\n      method: 'GET',\n      headers: {\n        Authorization: token\n      }\n    };\n\n    const res = await this.request(url, options);\n    let entityDetail = null;\n    try {\n      entityDetail = res.data;\n    } catch(e) {\n      Logger.debug('error getEntityDetail: ', e.message);\n    }\n\n    if (typeof callback === 'function') {\n      return callback(entityDetail);\n    }\n\n    return entityDetail;\n  },\n\n  getLiveStatusDetail: async function(api, token, entityId, callback) {\n    const url = `${parseAPIUrl(api)}/api/private/${API_VERSION}/live/entity?id=${entityId}`;\n    const options = {\n      method: 'GET',\n      headers: {\n        Authorization: token\n      }\n    };\n\n    const res = await this.request(url, options);\n    let entityDetail = null;\n    try {\n      entityDetail = res.data;\n    } catch(e) {\n      Logger.debug('error getLiveStatusDetail: ', e.message);\n    }\n\n    if (typeof callback === 'function') {\n      return callback(entityDetail);\n    }\n\n    return entityDetail;\n  },\n}\n\nconst parseAPIUrl = function(api) {\n  const url = Base64.atob(api);\n\n  return Utils.urlToHttps(url);\n};\n"]}