{"version":3,"sources":["../../../src/utils/Base64.js"],"names":["btoa","input","str","output","block","charCode","i","map","chars","charAt","charCodeAt","Error","atob","replace","length","bc","bs","buffer","String","fromCharCode","indexOf"],"mappings":"yEAAe,CACbA,KAAM,eAAiB,IAAhBC,MAAgB,2DAAR,EAAQ,CACrB,GAAIC,KAAMD,KAAV,CACA,GAAIE,QAAS,EAAb,CAEA,IAAK,GAAIC,OAAQ,CAAZ,CAAeC,QAAf,CAAyBC,EAAI,CAA7B,CAAgCC,IAAMC,KAA3C,CACKN,IAAIO,MAAJ,CAAWH,EAAI,CAAf,IAAsBC,IAAM,GAAN,CAAWD,EAAI,CAArC,CADL,CAEKH,QAAUI,IAAIE,MAAJ,CAAW,GAAKL,OAAS,EAAIE,EAAI,CAAJ,CAAQ,CAArC,CAFf,CAEwD,CAEtDD,SAAWH,IAAIQ,UAAJ,CAAeJ,GAAK,EAAE,CAAtB,CAAX,CAEA,GAAID,SAAW,IAAf,CAAqB,CACnB,KAAM,IAAIM,MAAJ,CAAU,0FAAV,CAAN,CACD,CAEDP,MAAQA,OAAS,CAAT,CAAaC,QAArB,CACD,CAED,MAAOF,OAAP,CACD,CAnBY,CAqBbS,KAAM,eAAgB,IAAfX,MAAe,2DAAP,EAAO,CACpB,GAAIC,KAAMD,MAAMY,OAAN,CAAc,KAAd,CAAqB,EAArB,CAAV,CACA,GAAIV,QAAS,EAAb,CAEA,GAAID,IAAIY,MAAJ,CAAa,CAAb,GAAmB,CAAvB,CAA0B,CACxB,KAAM,IAAIH,MAAJ,CAAU,mEAAV,CAAN,CACD,CACD,IAAK,GAAII,IAAK,CAAT,CAAYC,GAAK,CAAjB,CAAoBC,MAApB,CAA4BX,EAAI,CAArC,CACKW,OAASf,IAAIO,MAAJ,CAAWH,GAAX,CADd,CAGK,CAACW,MAAD,GAAYD,GAAKD,GAAK,CAAL,CAASC,GAAK,EAAL,CAAUC,MAAnB,CAA4BA,MAAjC,CACZF,KAAO,CADP,EACYZ,QAAUe,OAAOC,YAAP,CAAoB,IAAMH,KAAO,CAAC,CAAD,CAAKD,EAAL,CAAU,CAAjB,CAA1B,CADtB,CACuE,CAJ5E,CAKE,CACAE,OAAST,MAAMY,OAAN,CAAcH,MAAd,CAAT,CACD,CAED,MAAOd,OAAP,CACD,CAtCY,C,CAyCf,GAAMK,OAAQ,mEAAd","file":"Base64.js","sourcesContent":["export default {\n  btoa: (input = '')  => {\n    let str = input;\n    let output = '';\n\n    for (let block = 0, charCode, i = 0, map = chars;\n         str.charAt(i | 0) || (map = '=', i % 1);\n         output += map.charAt(63 & block >> 8 - i % 1 * 8)) {\n\n      charCode = str.charCodeAt(i += 3/4);\n\n      if (charCode > 0xFF) {\n        throw new Error('\"btoa\" failed: The string to be encoded contains characters outside of the Latin1 range.');\n      }\n\n      block = block << 8 | charCode;\n    }\n\n    return output;\n  },\n\n  atob: (input = '') => {\n    let str = input.replace(/=+$/, '');\n    let output = '';\n\n    if (str.length % 4 === 1) {\n      throw new Error('\"atob\" failed: The string to be decoded is not correctly encoded.');\n    }\n    for (let bc = 0, bs = 0, buffer, i = 0;\n         buffer = str.charAt(i++);\n\n         ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n         bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      buffer = chars.indexOf(buffer);\n    }\n\n    return output;\n  }\n};\n\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n"]}